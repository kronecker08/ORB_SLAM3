#Jai Shri Shyam
FROM ubuntu:18.04 
ENV DEBIAN_FRONTEND noninteractive

# install dependencies via apt
ENV DEBCONF_NOWARNINGS yes
RUN set -x && \
  apt-get update -y -qq && \
  apt-get upgrade -y -qq --no-install-recommends && \
  : "basic dependencies" && \
  apt-get install -y -qq \
    build-essential \
    pkg-config \
    cmake \
    git \
    wget \
    curl \
    tar \
    nano \
    unzip && \
  : "g2o dependencies" && \
  apt-get install -y -qq \
    libgoogle-glog-dev \
    libatlas-base-dev \
    libsuitesparse-dev \
    libglew-dev && \
  : "OpenCV dependencies" && \
  apt-get install -y -qq \
    libgtk-3-dev \
    libjpeg-dev \
    libpng++-dev \
    libtiff-dev \
    libopenexr-dev \
    libwebp-dev \
    ffmpeg \
    libavcodec-dev \
    libavformat-dev \
    libavutil-dev \
    libswscale-dev \
    libssl-dev \
    libavresample-dev && \
  : "other dependencies" && \
  apt-get install -y -qq \
    libyaml-cpp-dev \
    qt5-default\
    gfortran\
    net-tools\
    libboost-serialization-dev

# Eigen
WORKDIR /
RUN wget -q https://gitlab.com/libeigen/eigen/-/archive/3.2.1/eigen-3.2.1.tar.bz2 && \
  	tar xf eigen-3.2.1.tar.bz2 && \
  	rm -rf eigen-3.2.1.tar.bz2 && \
  	cd eigen-3.2.1 && \
  	mkdir -p build && \
  	cd build && \
  	cmake \
  	-DCMAKE_BUILD_TYPE=Release\
    	.. && \
  	make -j24 && \
  	make install 


# OpenCV
WORKDIR /
RUN wget -q https://github.com/opencv/opencv/archive/3.2.0.zip && \
  	unzip -q 3.2.0.zip && \
  	rm -rf 3.2.0.zip && \
  	cd opencv-3.2.0 && \
  	mkdir -p build && \
  	cd build && \
  	cmake \
  	-DCMAKE_BUILD_TYPE=Release\
    .. && \
  make -j24 && \
  make install

# Pangolin
WORKDIR /
RUN git clone https://github.com/stevenlovegrove/Pangolin.git && \
	  cd Pangolin && \
	  mkdir -p build && \
	  cd build && \
	  cmake \     
	-DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} \
    -DBUILD_EXAMPLES=OFF \
    -DBUILD_PANGOLIN_DEPTHSENSE=OFF \
    -DBUILD_PANGOLIN_FFMPEG=OFF \
    -DBUILD_PANGOLIN_LIBDC1394=OFF \
    -DBUILD_PANGOLIN_LIBJPEG=OFF \
    -DBUILD_PANGOLIN_LIBOPENEXR=OFF \
    -DBUILD_PANGOLIN_LIBPNG=OFF \
    -DBUILD_PANGOLIN_LIBREALSENSE=OFF \
    -DBUILD_PANGOLIN_LIBREALSENSE2=OFF \
    -DBUILD_PANGOLIN_LIBTIFF=OFF \
    -DBUILD_PANGOLIN_LIBUVC=OFF \
    -DBUILD_PANGOLIN_LZ4=OFF \
    -DBUILD_PANGOLIN_OPENNI=OFF \
    -DBUILD_PANGOLIN_OPENNI2=OFF \
    -DBUILD_PANGOLIN_PLEORA=OFF \
    -DBUILD_PANGOLIN_PYTHON=OFF \
    -DBUILD_PANGOLIN_TELICAM=OFF \
    -DBUILD_PANGOLIN_TOON=OFF \
    -DBUILD_PANGOLIN_UVC_MEDIAFOUNDATION=OFF \
    -DBUILD_PANGOLIN_V4L=OFF \
    -DBUILD_PANGOLIN_VIDEO=OFF \
    -DBUILD_PANGOLIN_ZSTD=OFF \
    -DBUILD_PYPANGOLIN_MODULE=OFF \
	  -DCMAKE_BUILD_TYPE=Release\
	    .. && \
	  make -j24 && \
	  make install

# ORB_SLAM3
WORKDIR /home
RUN git clone -b docker https://github.com/kronecker08/ORB_SLAM3.git && \
	cd ORB_SLAM3 && \
	chmod +x build.sh && \
	./build.sh

# ROS 
RUN echo 'Etc/UTC' > /etc/timezone && \
    ln -s /usr/share/zoneinfo/Etc/UTC /etc/localtime && \
    apt-get update && \
    apt-get install -q -y --no-install-recommends tzdata

RUN apt-get update && apt-get install -q -y --no-install-recommends \
    dirmngr \
    gnupg2 \
    && rm -rf /var/lib/apt/lists/*

# setup keys
RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654

# setup sources.list
RUN echo "deb http://packages.ros.org/ros/ubuntu bionic main" > /etc/apt/sources.list.d/ros1-latest.list

#install ROS 
RUN apt-get update && apt-get install -y ros-melodic-desktop-full

#Environment Setup
RUN echo "source /opt/ros/melodic/setup.bash" >> ~/.bashrc 
#	source ~/.bashrc

#Dependemcies for building packages 
RUN apt install -y python-rosdep \
python-rosinstall \
python-rosinstall-generator \
python-wstool build-essential

RUN apt install python-rosdep

RUN rosdep init
RUN rosdep update

RUN echo "export ROS_PACKAGE_PATH=${ROS_PACKAGE_PATH}:/home/ORB_SLAM3/Examples/ROS" >> ~/.bashrc 
#	source ~/.bashrc

#WORKDIR /home/ORB_SLAM3
#RUN cd /home/ORB_SLAM3
RUN chmod +x for_source.sh
RUN ./for_source.sh
RUN chmod +x build_ros.sh
RUN ./build_ros.sh
ENTRYPOINT ["/bin/bash"]